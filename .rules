# Rules for LLM Model: YAML to Go Code Generator

## Core Conversion Rules

1. **Type Mapping**:
   - YAML string → Go `*string` (pointer to string)
   - YAML number → Go `*int` or appropriate numeric type (pointer)
   - YAML boolean → Go `*bool` (pointer to boolean)
   - YAML list/array → Go slice `[]T` where T is the element type
   - YAML map (populated) → Go struct with fields
   - Empty YAML map `{}` → Go `map[string]any`
   - Empty YAML list `[]` → Go `[]any`

2. **Struct Generation**:
   - Each YAML document becomes a root-level struct named "Document1", "Document2", etc.
   - If document has only one top-level key, use that key's name as the struct name
   - Convert YAML keys to PascalCase for Go field names
   - Nested maps become separate struct types

3. **JSON Tags**:
   - All struct fields must have `json:"original_yaml_key"` tags
   - Use original YAML key casing in JSON tags (snake_case, camelCase, etc.)
   - Add `omitempty` for empty values: `""`, `[]`, `{}`, `0`
   - For Go 1.24+, use `omitzero` instead of `omitempty`

4. **Empty Value Handling**:
   - Empty string `""` → `*string` with `omitempty` tag
   - Empty int `0` → `*int` with `omitempty` tag
   - Empty map `{}` → `map[string]any` with `omitempty` tag
   - Empty slice `[]` → `[]any` with `omitempty` tag

5. **Naming Conventions**:
   - Convert YAML keys to Go exported field names (capitalize first letter)
   - Use camelCase to PascalCase conversion for multi-word keys
   - Preserve original casing in JSON tags

6. **Code Structure**:
   - Generate all struct types
   - Place main/root structs first
   - Place nested/child structs after
   - Ensure proper Go syntax and formatting

## Output Requirements

- Generate valid Go code that compiles
- Include all necessary struct definitions
- Maintain proper field ordering
- Use consistent indentation (tabs)
- Follow Go naming conventions for exported fields
